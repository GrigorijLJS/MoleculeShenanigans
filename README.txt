A short story
First of all, I would like to mention that I built up the project with some assumptions in my mind. I will touch on some of them in this document further down while others can be seen as comments in the code itself. Second, the code is unfinished. By that I mean that all the classes (and tests) can be expanded and made much better the more they are worked on. That is obvious, I know, but nonetheless I included some comments in the code where things can be improved. Third, I tried to also include my reasoning and design decisions via comments in the code (some will be discussed in this document). You will need Visual Studio 2019 (I am using Microsoft Visual Studio Community 2019, Version 16.11.3) and minimum C++ 17 support because the code has some C++ 14 and C++ 17 specific functionality (and C++ 11, of course).  

The solution contains 2 projects: MoleculeShenanigans and MoleculeShenanigansTests. The first contains 3 classes: Molecule, MoleculeCollection, and MoleculeOperations; and one .cpp (called MoleculeShenanigans.cpp) This last .cpp acts as the entry point for the project via the (abused) main() function where all the functionality is invoked from. This was done out of convenience and to keep things simple.

The class Molecule contains a few elements that identify a molecule. That is done by using the name of a molecule and 3 map containers. This way a molecule can have as many properties as needed by simply passing the name of the property and its value (supported types are: int, float, and string, but that can be expanded easily). 
Two Molecule objects are, at the moment, naively compared if they are equal. That is done by checking if their names and the contents of their property maps are equal. This means that if two Molecule objects are exactly the same by name but one contains an extra property of any type then those two molecules are not equal.

For MoleculeCollection I went with the path where: 
-	Molecule objects are not stolen and can be used in main() even after they are added to a collection; 
-	When a molecule operation is performed the original collections are not modified.
MoleculeCollection could be changed to use pointers of the class Molecule. One approach could be to steal a unique_ptr to a Molecule when one is passed to it via the MoleculeCollection::addMolecule function. This could also lead to changes in the MoleculeOperations, where any union\difference\intersection could also be “destructive” by stealing from the two collections it operates on and possibly making them unusable. All of that depends on what kind of functionality is required, of course. 
The adding of molecules in this class could also be extended to merge two molecules that are almost the same but the passed one has extra properties. In this case the molecule in the collection could copy over the properties that it is missing. I touched on this subject in the comments of MoleculeCollection::addMolecule.

All the unit test are included in the MoleculeShenanigansTests project (the “MoleculeShenanigansTests.cpp” specifically). They can be used to test some of the functionality of the aforementioned classes. That includes making a molecule, adding it to a molecule collection, getting the union, difference, or intersection of two collections. More unit test could be added and the existing could be expanded to make them better. All the tests are clumped together in the same .cpp out of convenience and to save some time.
